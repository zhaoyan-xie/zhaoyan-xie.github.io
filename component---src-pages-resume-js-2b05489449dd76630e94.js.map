{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/pages/resume.js"],"names":["getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr","data","history","allMarkdownRemark","edges","allFile","imageMap","Utils","title","href","target","download","style","fontSize","icon","className","key","id","frontmatter","fields","html"],"mappings":"oOAAe,G,UAAA,CACbA,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAME,KAAKC,aAAaC,MAAMT,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIM,eAAeJ,GACjBF,EAAIE,GAAMK,QAAUT,GACtBE,EAAIE,GAAMM,KAAKP,EAAME,KAAKM,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKP,EAAME,KAAKM,gBAAgBC,OACpCV,EAAIE,GAAQS,OAGdX,EAAIE,GAAQD,EAAME,KAAKM,gBAAgBC,MAEzC,OAAOV,IACN,Q,kCCjBP,gFAOe,sBAAe,IAAZY,EAAW,EAAXA,KACVC,EAAUD,EAAKE,kBAAkBC,OAAS,GAC1CpB,EAASiB,EAAKI,QAAQD,OAAS,GAC/BE,EAAWC,IAAMxB,YAAYC,EAAQ,kBAC3C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKwB,MAAM,WACX,kBAAC,IAAD,CAAWA,MAAM,UAAjB,IAEE,uBAAGC,KAAK,mBAAmBC,OAAO,SAASC,UAAQ,GACjD,kBAAC,IAAD,CACEC,MAAO,CAAEC,SAAU,QACnBC,KAAM,CAAC,MAAO,iBACdC,UAAU,iBAIhB,kBAAC,IAAD,CAAWA,UAAU,YAAYhB,OAAK,GACnCG,EAAQb,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OACX,yBAAKwB,IAAKxB,EAAKyB,IACb,kBAAC,IAAD,CACEC,YAAa1B,EAAK0B,YAClB5B,MAAOgB,EAASd,EAAK2B,OAAO5B,MAC5B6B,KAAM5B,EAAK4B,OAEb,wBAAIL,UAAU","file":"component---src-pages-resume-js-2b05489449dd76630e94.js","sourcesContent":["export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0]\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid)\n        } else {\n          const arr = []\n          arr.push(image.node.childImageSharp.fluid)\n          map[slug] = arr\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid\n      }\n      return map\n    }, {})\n  },\n}\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { PageLayout, PageTitle, WorkHistory } from \"../components\"\nimport { SEO, Utils } from \"../utils\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport Container from \"react-bootstrap/Container\"\n\nexport default ({ data }) => {\n  const history = data.allMarkdownRemark.edges || []\n  const images = data.allFile.edges || []\n  const imageMap = Utils.getImageMap(images, /\\/[work].*\\/|$/)\n  return (\n    <PageLayout>\n      <SEO title=\"Resume\" />\n      <PageTitle title=\"Resume\">\n        &nbsp;\n        <a href=\"../../resume.pdf\" target=\"_blank\" download>\n          <FontAwesomeIcon\n            style={{ fontSize: \"2rem\" }}\n            icon={[\"fas\", \"file-download\"]}\n            className=\"icons file\"\n          />\n        </a>\n      </PageTitle>\n      <Container className=\"mt-5 pt-3\" fluid>\n        {history.map(({ node }) => (\n          <div key={node.id}>\n            <WorkHistory\n              frontmatter={node.frontmatter}\n              image={imageMap[node.fields.slug]}\n              html={node.html}\n            />\n            <hr className=\"w-75\" />\n          </div>\n        ))}\n      </Container>\n    </PageLayout>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/work/\" } }\n      sort: { fields: [frontmatter___startDate], order: DESC }\n    ) {\n      edges {\n        node {\n          id\n          html\n          frontmatter {\n            company\n            location\n            position\n            tags\n            startDate(formatString: \"MMMM\")\n            endDate(formatString: \"MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    allFile(\n      filter: {\n        extension: { eq: \"png\" }\n        relativePath: { regex: \"/company/\" }\n        relativeDirectory: { regex: \"/content/work/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}